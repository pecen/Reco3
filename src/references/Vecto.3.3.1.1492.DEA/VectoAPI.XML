<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectoAPI</name>
    </assembly>
    <members>
        <member name="T:TUGraz.VectoAPI.IVectoApiRun">
            <summary>
            Interface for using VECTO via the API in the OEM's application
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.WriteModData">
            <summary>
            enables/disables writing of modal data
            disabled by default
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.ValidateInput">
            <summary>
            enables/disables validation of the input data
            can be used for speeding up the creation of all
            simulation runs
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.WaitFinished">
            <summary>
            enable/disable a blocking call to RunSimulation
            by default RunSimulation is blocking
            </summary>
        </member>
        <member name="M:TUGraz.VectoAPI.IVectoApiRun.RunSimulation">
            <summary>
            execut the simulation 
            may throw an AggregateException if WaitFinished is true
            </summary>
        </member>
        <member name="M:TUGraz.VectoAPI.IVectoApiRun.GetProgress">
            <summary>
            get the progress of all simulation runs. the key is unique per 
            simulation job
            </summary>
        </member>
        <member name="M:TUGraz.VectoAPI.IVectoApiRun.WaitSimulationFinished">
            <summary>
            blocking wait for all simulation runs to be completed
            (only useful if the call to RunSimulation has been set to
            be non-blocking (see Waitfinished)
            may throw an AggregateException
            When running the simulation non-blocking (i.e., Waitfinished is false)
            this method _has to_ be called to re-throw any excpetions
            from the simulation tasks
            (otherwise inspect the ProgressEntries from GetProgess)
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.IsFinished">
            <summary>
            returns true if all simulation runs are completed
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.XMLManufacturerReport">
             <summary>
            get the XML containing the Manufacturer Report
            only valid after the simulation is finished
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.XMLCustomerReport">
             <summary>
            get the XML containing the Customer Report
            only valid after the simulation is finished
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.XMLMonitoringReport">
             <summary>
            get the XML containing the Monitoring Report
            only valid after the simulation is finished
            </summary>
        </member>
        <member name="P:TUGraz.VectoAPI.IVectoApiRun.SumEntries">
            <summary>
            Get the entries written to the .vsum file
            </summary>
        </member>
        <member name="M:TUGraz.VectoAPI.IVectoApiRun.ModData(System.Int32)">
            <summary>
            get the modal data of a simulation run. the
            runId is the identifier of the simulation run within 
            the current job (see also the keys in GetProgess
            </summary>
        </member>
        <member name="T:TUGraz.VectoAPI.VectoApi">
            <summary>
            Creates IVectoApiRun instances for simulation
            </summary>
        </member>
        <member name="M:TUGraz.VectoAPI.VectoApi.VectoInstance(System.Xml.XmlReader,System.Boolean)">
            <summary>
            
            </summary>
            <param name="inputData"></param>
            <param name="writeModData"></param>
            <returns></returns>
        </member>
        <member name="M:TUGraz.VectoAPI.VectoApi.VectoInstance(TUGraz.VectoCommon.InputData.IDeclarationInputDataProvider,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dataProvider"></param>
            <param name="writeModData"></param>
            <returns></returns>
        </member>
        <member name="M:TUGraz.VectoAPI.VectoApi.GetVectoCoreVersion">
            <summary>
            Get the version of VectoCore
            </summary>
            <returns></returns>
        </member>
        <member name="T:TUGraz.VectoAPI.VectoApiRun">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
